head(trades.csv)
print(paste("loaded ninja trade file",filename,sep=":"))
eod.xts <- load.eod.prices(ccy.pair,path.eod)
print(paste("loaded eod reval file",paste(path.eod,ccy.pair,sep=""),sep=":"))
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,"USD"), error=function(e) print(e), finally=traceback())
debug(make.daily.pnl)
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,"USD"), error=function(e) print(e), finally=traceback())
c
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,"USD"), error=function(e) print(e), finally=traceback())
i
Q
source("C:/Users/Keiran/Documents/Backtest_Source/R/daily_PnL_v3.R")
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,"USD"), error=function(e) print(e), finally=traceback())
debug(make.daily.pnl)
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,"USD"), error=function(e) print(e), finally=traceback())
idx.skip
dim(entries)
length(entries)
length(exits)
any(is.na(entries))
which(is.na(entries))
head(entries)
head(trades.cav)
head(trades.csv)
as.POSIXct(trades.csv$Entry.time[1],format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
as.POSIXct(trades.csv$Entry.time[2],format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
as.POSIXct(trades.csv$Entry.time[3],format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
trades.csv$Entry.time[3]
trades.csv$Entry.time[1:3]
as.POSIXct(trades.csv$Entry.time[1:3],format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
a <- trades.csv$Entry.time[3]
as.POSIXct(a,format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
as.POSIXct(a,format="%d/%m/%Y %I:%M:%S",tz=TZ)
?as.POSIXct
TZ
a
strptime(a,format="%d/%m/%Y %I:%M:%S",tz=TZ)
strptime(a,format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
b < -a
b < a
a
b <- "7/15/2012 10:02:00 AM"
strptime(a,format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
strptime(a,format="%m/%d/%Y %I:%M:%S %p",tz=TZ)
Sys.setenv(TZ = "Europe/London")
library(quantmod)
library(PerformanceAnalytics)
source("C:/Users/Keiran/Documents/Backtest_Source/R/daily_PnL_v3.R")
# hard coded paths for debug - need trailing slash
#setwd("Y:/SIS Cloud/Dev/Backtest_Source/R/")
path.in <- "Y:/SIS Cloud/Trades_NT7 Backtest/Trades_New/"
path.eod <- "Y:/Data History/Revaluation rates/"
#filename <- "EURUSD_3x 60 240_0708.csv"
#filename <- "EUR Buys_NinjaTrader Trade List 1_01_2006 - 31_12_2012.csv"
filename <- "TEST 1a_EURUSD_CIT1_60_ACAP ATR05_TSL1_LB1_B_2012 Q3-4.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "C:/Temp/"
ccy.pair <- "EURUSD"
strategy <- "CIT_1"
timeframe <- "60 min"
# series of function calls to be executed in C#
trades.csv <- get.ninja.trades(file.with.path=filename)
trades.csv <- get.ninja.trades(file.with.path)#=filename)
head(trades.csv)
filename <- "TEST 2a_EURUSD_CIT1_60_ACAP ATR05_TSL1_LB1_B_2012 Q3-4.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "C:/Temp/"
ccy.pair <- "EURUSD"
strategy <- "CIT_1"
timeframe <- "60 min"
# series of function calls to be executed in C#
trades.csv <- get.ninja.trades(file.with.path)#=filename)
filename <- "TEST 2a_EURUSD_CIT1_60_ACAP ATR05_TSL1_LB2_B_2012 Q3-4.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "C:/Temp/"
ccy.pair <- "EURUSD"
strategy <- "CIT_1"
timeframe <- "60 min"
# series of function calls to be executed in C#
trades.csv <- get.ninja.trades(file.with.path)#=filename)
head(trades.csv)
print(paste("loaded ninja trade file",filename,sep=":"))
eod.xts <- load.eod.prices(ccy.pair,path.eod)
print(paste("loaded eod reval file",paste(path.eod,ccy.pair,sep=""),sep=":"))
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,"USD"), error=function(e) print(e), finally=traceback())
debug(make.daily.pnl)
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,"USD"), error=function(e) print(e), finally=traceback())
any(is.na(entries))
which(is.na(entries))
as.POSIXct(trades.csv$Entry.time[1],format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
trades.csv$Entry.time[1]
a <- trades.csv$Entry.time[1]
b <- "11/07/2012 04:21 AM"
b
as.POSIXct(a,format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
as.POSIXct(b,format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
b <- "11/7/2012 4:21 AM"
as.POSIXct(b,format="%d/%m/%Y %I:%M:%S %p",tz=TZ)
as.POSIXct(b,format="%d/%m/%Y %I:%M %p",tz=TZ)
as.POSIXct(a,format="%d/%m/%Y %I:%M %p",tz=TZ)
Sys.setenv(TZ = "Europe/London")
library(quantmod)
library(PerformanceAnalytics)
source("C:/Users/Keiran/Documents/Backtest_Source/R/daily_PnL_v3.R")
# hard coded paths for debug - need trailing slash
#setwd("Y:/SIS Cloud/Dev/Backtest_Source/R/")
path.in <- "Y:/SIS Cloud/Trades_NT7 Backtest/Trades_New/"
path.eod <- "Y:/Data History/Revaluation rates/"
#filename <- "EURUSD_3x 60 240_0708.csv"
#filename <- "EUR Buys_NinjaTrader Trade List 1_01_2006 - 31_12_2012.csv"
filename <- "TEST 1a_EURUSD_CIT1_60_ACAP ATR05_TSL1_LB2_B_2012 Q3-4.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "C:/Temp/"
ccy.pair <- "EURUSD"
strategy <- "CIT_1"
timeframe <- "60 min"
# series of function calls to be executed in C#
trades.csv <- get.ninja.trades(file.with.path)#=filename)
filename <- "TEST 1a_EURUSD_CIT1_15_ACAP ATR05_TSL1_LB1_B_2012 Q3-4.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "C:/Temp/"
ccy.pair <- "EURUSD"
strategy <- "CIT_1"
timeframe <- "60 min"
# series of function calls to be executed in C#
trades.csv <- get.ninja.trades(file.with.path)#=filename)
head(trades.csv)
print(paste("loaded ninja trade file",filename,sep=":"))
eod.xts <- load.eod.prices(ccy.pair,path.eod)
print(paste("loaded eod reval file",paste(path.eod,ccy.pair,sep=""),sep=":"))
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,"USD",fmt="%m/%d/%Y %I:%M:%S %p"), error=function(e) print(e), finally=traceback())
tail(eod.xts)
eod.xts <- load.eod.prices(ccy.pair,path.eod)
tail(eod.xts)
print(paste("loaded eod reval file",paste(path.eod,ccy.pair,sep=""),sep=":"))
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,"USD",fmt="%m/%d/%Y %I:%M:%S %p"), error=function(e) print(e), finally=traceback())
tail(processed$pnl.raw)
sum(processed$pnl.raw)
sum(processed$pnl.daily)
?knitr
library(knitr)
?knitr
new.edge.csv <- read.csv("Y:/Data History/Benchmarks Indices/Other/NewEdge_CTA_Historical.csv",header=F,stringsAsFactors=F)
vals <- as.numeric(strsplit(new.edge.csv[,2],"%"))/100
new.edge.xts <- xts(vals,as.POSIXct(new.edge.csv[,1],format="%d/%m/%Y",tz="Europe/London"))
Sys.setenv(TZ = "Europe/London")
library(quantmod)
library(PerformanceAnalytics)
source("C:/Users/Keiran/Documents/Backtest_Source/R/daily_PnL_v3.R")
new.edge.csv <- read.csv("Y:/Data History/Benchmarks Indices/Other/NewEdge_CTA_Historical.csv",header=F,stringsAsFactors=F)
vals <- as.numeric(strsplit(new.edge.csv[,2],"%"))/100
new.edge.xts <- xts(vals,as.POSIXct(new.edge.csv[,1],format="%d/%m/%Y",tz="Europe/London"))
new.edge.xts <- na.omit(new.edge.xts)
colnames(new.edge.xts) <- "NewEdge CTA Index"
print("loaded NewEdge file")
head(new.edge.xts)
tail(new.edge.xts)
charts.PerformanceSummary(new.edge.xts["2012-06::2012-07"])
charts.PerformanceSummary(new.edge.xts["2012-06::2012-12"])
Sys.setenv(TZ = "Europe/London")
library(quantmod)
library(PerformanceAnalytics)
source("C:/Users/Keiran/Documents/Backtest_Source/R/daily_PnL_v3.R")
path.in <- "Y:/SIS Cloud/Trades_NT7 Backtest/Trades_New/"
path.eod <- "Y:/Data History/Revaluation rates/"
filename <- "BT1 AUDCAD Buys 15_12_2005 - 31_12_2012.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "C:/Temp/"
ccy.pair <- "AUDCAD"
strategy <- "CIT_1"
timeframe <- "240 min"
trades.csv <- get.ninja.trades(file.with.path)#=filename)   # NOTE filename variable has path in C#
print(paste("loaded ninja trade file",filename,sep=":"))
#eod.xts <- load.eod.prices(ccy.pair,path.eod)
toUSD.xts <- load.USD.conv(ccy.pair,path.eod)
print(paste("loaded eod reval file",paste(path.eod,ccy.pair,sep=""),sep=":"))
processed <- tryCatch(make.daily.pnl(trades.csv,toUSD.xts,toUSD.xts,"USD",fmt="%d/%m/%Y %I:%M:%S %p"), error=function(e) print(e), finally=traceback())
tail(processed$trades)
plot(cumsum(processed$pnl.raw))
plot(cumsum(processed$pnl.daily))
plot(cumsum(processed$trades$pnl))
dim(processed$trades)
length(processed$pnl.raw)
length(processed$pnl.daily)
tail(process$pnl.daily)
tail(processed$pnl.daily)
tail(processed$trades)
plot(processed$pnl.raw)
barplot(processed$pnl.raw)
barplot(processed$pnl.daily)
table.AnnualizedReturns(processed$pnl.daily)
table.AnnualizedReturns(processed$pnl.raw)
AnnualizedReturns(processed$pnl.raw)
Return.annualized(processed$pnl.raw)
any(is.na(processed$pnl.raw))
sum(processed$pnl.raw)
sum(processed$pnl.daily)
debug(make.daily.pnl)
processed <- make.daily.pnl(trades.csv,toUSD.xts,toUSD.xts)
c
c
c
c
processed <- make.daily.pnl(trades.csv,toUSD.xts,toUSD.xts)
c
c
c
c
plot(cumsum(pnl.raw.vals))
plot(cumsum(pnl.raw.xts))
plot(cumsum(pnl.raw.usd))
plot(cumsum(pnl))
tail(pnl)
sum(pnl)
sum(pnl.raw.vals)
sum(pnl.raw.usd)
trades.csv[1,]
sum(pnl) - sum(pnl.raw.xts)
sum(pnl.xts)
sum(pnl)
sum(pnl.daily)
sum(pnl.daily.usd)
sum(pnl.raw.usd)
sum(pnl.raw.usd) - sum(pnl.daily.usd)
sum(pnl.daily.usd) - sum(pnl.raw.usd)
sum(pnl)
sum(pnl.raw.vals)
sum(pnl.raw.usd)
plot(cumsum(pnl.raw.xts))
plot(cumsum(pnl.raw.usd))
plot(cumsum(pnl.daily))
plot(cumsum(pnl.daily.usd))
plot(cumsum(pnl.daily.usd)["2012"])
plot(cumsum(pnl.daily.usd)["2012-01"])
barplot(pnl.xts["2012-01"])
pnl.xts["2012-01"]
all.trades.xts <- xts(all.trades,as.POSIXct(all.trades[,"Exit.time"]))
all.trades.xts["2012-01"]
all.trades.xts["2012-01"][1:4,]
all.trades.xts["2012-01"][1:10,]
toUSD.xts["2012-01"]
plot(toUSD.xts["2012-01"])
eod.xts <- load.eod.prices(ccy.pair,path.eod)
Q
filename <- "BT1 AUDJPY Buys 15_12_2005 - 31_12_2012.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "C:/Temp/"
ccy.pair <- "AUDJPY"
strategy <- "CIT_1"
timeframe <- "240 min"
# series of function calls to be executed in C#
trades.csv <- get.ninja.trades(file.with.path)#=filename)   # NOTE filename variable has path in C#
filename <- "BT1 AUDJPY Buys 1_01_2006 - 31_12_2012.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "C:/Temp/"
ccy.pair <- "AUDJPY"
strategy <- "CIT_1"
timeframe <- "240 min"
# series of function calls to be executed in C#
trades.csv <- get.ninja.trades(file.with.path)#=filename)   # NOTE filename variable has path in C#
print(paste("loaded ninja trade file",filename,sep=":"))
eod.xts <- load.eod.prices(ccy.pair,path.eod)
toUSD.xts <- load.USD.conv(ccy.pair,path.eod)
print(paste("loaded eod reval file",paste(path.eod,ccy.pair,sep=""),sep=":"))
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,toUSD.xts,"USD",fmt="%d/%m/%Y %I:%M:%S %p"), error=function(e) print(e), finally=traceback())
c
traceback()
file.with.path
make.daily.pnl(trades.csv,eod.xts,toUSD.xts,"USD",fmt="%d/%m/%Y %I:%M:%S %p")
c
x <- make.daily.pnl(trades.csv,eod.xts,toUSD.xts,"USD",fmt="%d/%m/%Y %I:%M:%S %p")
c
plot(cumsum(x$pnl.raw))
plot(cumsum(x$pnl.daily))
Q
save.image("~/.RData")
Sys.setenv(TZ = "Europe/London")
library(quantmod)
library(PerformanceAnalytics)
source("C:/Users/Keiran/Documents/Backtest_Source/R/daily_PnL_v3.R")
path.in <- "Y:/SIS Cloud/Trades_NT7 Backtest/Trades_New/"
path.eod <- "Y:/Data History/Revaluation rates/"
filename <- "BT1 AUDJPY Buys 1_01_2006 - 31_12_2012.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "C:/Temp/"
ccy.pair <- "AUDJPY"
strategy <- "CIT_1"
timeframe <- "240 min"
trades.csv <- get.ninja.trades(file.with.path=filename)   # NOTE filename variable has path in C#
filename <- "BT1 AUDJPY Buys 1_01_2006 - 31_12_2012.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "C:/Temp/"
ccy.pair <- "AUDJPY"
strategy <- "CIT_1"
timeframe <- "240 min"
trades.csv <- get.ninja.trades(file.with.path)#=filename)   # NOTE filename variable has path in C#
print(paste("loaded ninja trade file",filename,sep=":"))
eod.xts <- load.eod.prices(ccy.pair,path.eod)
toUSD.xts <- load.USD.conv(ccy.pair,path.eod)
print(paste("loaded eod reval file",paste(path.eod,ccy.pair,sep=""),sep=":"))
processed <- tryCatch(make.daily.pnl(trades.csv,eod.xts,toUSD.xts,"USD",fmt="%d/%m/%Y %I:%M:%S %p"), error=function(e) print(e), finally=traceback())
processed <- make.daily.pnl(trades.csv,eod.xts,toUSD.xts,"USD",fmt="%d/%m/%Y %I:%M:%S %p")
plot(cumsum(processed$pnl.raw))
plot(cumsum(processed$pnl.daily))
print("made daily pnl")
write.csv2(processed$trades,file=paste0(path.out,filestem.out,"_processed.csv"))
write.zoo(processed$pnl.raw,file=paste0(path.out,filestem.out,"_pnl_raw.csv"))
write.zoo(processed$pnl.daily,file=paste0(path.out,filestem.out,"_pnl_daily.csv"))
print("wrote log files")
# load benchmark files
new.edge.csv <- read.csv("Y:/Data History/Benchmarks Indices/Other/NewEdge_CTA_Historical.csv",header=F,stringsAsFactors=F)
vals <- as.numeric(strsplit(new.edge.csv[,2],"%"))/100
new.edge.xts <- xts(vals,as.POSIXct(new.edge.csv[,1],format="%d/%m/%Y",tz="Europe/London"))
new.edge.xts <- na.omit(new.edge.xts)
colnames(new.edge.xts) <- "NewEdge CTA Index"
print("loaded NewEdge file")
# download treasury rate data if necessary
if (!exists("DTB3") || index(last(DTB3)) < index(last(processed$pnl.daily))) {
getSymbols('DTB3',src='FRED') # risk free rate
rf.rate.daily <- na.locf(DTB3/100)
rf.rate.weekly <- period.apply(DTB3/100,endpoints(rf.rate.daily,'weeks'),FUN=mean)
rf.rate.monthly <- period.apply(DTB3/100,endpoints(rf.rate.daily,'months'),FUN=mean)
}
print("loaded treasury rate data")
AUM <- 1.e8
pnl.daily <- processed$pnl.daily/AUM
pnl.dat.daily <- merge(pnl.daily,new.edge.xts,all=FALSE)
pnl.dat.daily[is.na(pnl.dat.daily)] <- 0
pnl.raw <- processed$pnl.raw
save(trades.csv,pnl.dat.daily,pnl.raw,DTB3,new.edge.xts,AUM,filestem.out,ccy.pair,strategy,timeframe,file="temp_pnl.RData")
print("saved temp_pnl.RData")
Sys.getenv()
Sys.getenv()
Sys.getenv('path')
Sys.get('path')
Sys.getenv('path')
Sys.which('pdflatex')
Sys.setenv(TZ = "Europe/London")
library(quantmod)
library(PerformanceAnalytics)
source("C:/Users/Keiran/Documents/Backtest_Source/R/daily_PnL_v4.R")
library(knitr)
opts_chunk$set(echo=FALSE, concordance=TRUE)
onepagereport <- paste0(path.out,filestem.out,".tex")
load("temp_pnl.RData")
onepagereport <- paste0(path.out,filestem.out,".tex")
print("pdf copied")
print(paste("pdf copied to",path.out,sep=" "))
library(quantmod)
require(quantmod)
require(PerformanceAnalytics)
require(xtable)
Sys.setenv(TZ = "Europe/London")
load("temp_pnl.RData")
barplot(pnl.raw)
barplot(sign(pnl.raw))
a <- as.numeric((sign(pnl.raw)))
head(a)
b <- rle(a)
which.max(b$lengths)
b$lengths[41]
length(pnl.raw)
pnl.raw.csv <- read.csv("Y:/SIS Cloud/Trades_NT7 Backtest/Trades_Reports/Test2/A1 EURUSD 240 OPT_ 1_01_2006 - 31_12_2012_pnl_raw.csv")
pnl.raw.csv
pnl.raw.sign <- sign(pnl.raw.csv[,3])
dim(pnl.raw.csv)
pnl.raw.csv <- read.csv("Y:/SIS Cloud/Trades_NT7 Backtest/Trades_Reports/Test2/A1 EURUSD 240 OPT_ 1_01_2006 - 31_12_2012_pnl_raw.csv",sep=" ")
dim(pnl.raw.csv)
pnl.raw.sign <- sign(pnl.raw.csv[,3])
head(pnl.raw.sign)
a <- rle(pnl.raw.sign)
max(a$lengths)
a
a$lengths
sum(a$lengths[1:(which.max(a$lengths)-1)])
pnl.raw.csv
cbind(pnl.raw.csv,pnl.raw.sign)
a <- rle(pnl.raw.sign)
a$length
a$values
a$length[a$value < 0]
Sys.setenv(TZ = "Europe/London")
library(quantmod)
library(PerformanceAnalytics)
path.src <- "C:/Users/Keiran/Documents/Backtest_Source/R/"
# hard coded paths for debug - need trailing slash
path.in <- "Y:/Saxons Cloud Data/Trades_NT7 Backtest/Trades_Reports/CIT/CIT1/CIT1_Buys/CIT1_Buys 240/"
filenames <- grep("BT2.*_pnl_daily.csv",dir(path.in),value=TRUE)
filestem <- "Test BT4"
path.out <- "Y:/SIS Cloud/Trades_NT7 Backtest/Portfolio_Reports/"
path.src <- "C:/Users/Keiran/Documents/Backtest_Source/R/"
source(paste0(path.src,"daily_PnL_v4.R"))
# hard coded paths for debug - need trailing slash
#setwd("Y:/SIS Cloud/Dev/Backtest_Source/R/")
path.in <- "Y:/Saxons Cloud Data/Trades_NT7 Backtest/Trades_New/"
path.eod <- "Y:/Data History/Revaluation rates/"
path.eod <- "Y:/Saxons Cloud Data/Data History/Revaluation rates/"
filename <- "A1 EURUSD 240 OPT_ 1_01_2006 - 31_12_2012.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "Y:/SIS Cloud/Trades_NT7 Backtest/Trades_Reports/Test2/"
path.out <- "Y:/Saxons Cloud Data/Cloud Data/Trades_NT7 Backtest/Trades_Reports/Test2/"
ccy.pair <- "EURUSD"
strategy <- "CIT_1"
timeframe <- "240 min"
strat.dir <- "Long"
# series of function calls to be executed in C#
trades.csv <- get.ninja.trades(file.with.path=filename)   # NOTE filename variable has path in C#
filename <- "BT17b 120 AUDCAD Buys 1_01_2006 - 31_12_2012.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "Y:/Saxons Cloud Data/Cloud Data/Trades_NT7 Backtest/Trades_Reports/Test2/"
ccy.pair <- "EURUSD"
trades.csv <- get.ninja.trades(file.with.path=filename)   # NOTE filename variable has path in C#
file.with.path
path.in <- "Y:/Saxons Cloud Data/Cloud Data/Trades_NT7 Backtest/Trades_New/"
path.eod <- "Y:/Saxons Cloud Data/Data History/Revaluation rates/"
filename <- "BT17b 120 AUDCAD Buys 1_01_2006 - 31_12_2012.csv"
file.with.path <- paste0(path.in,filename)
filestem.out <- substr(filename,start=1,stop=nchar(filename)-4)
path.out <- "Y:/Saxons Cloud Data/Cloud Data/Trades_NT7 Backtest/Trades_Reports/Test2/"
ccy.pair <- "EURUSD"
strategy <- "CIT_1"
timeframe <- "240 min"
strat.dir <- "Long"
# series of function calls to be executed in C#
trades.csv <- get.ninja.trades(file.with.path=filename)   # NOTE filename variable has path in C#
trades.csv <- get.ninja.trades(file.with.path)#=filename)   # NOTE filename variable has path in C#
print(paste("loaded ninja trade file",filename,sep=":"))
eod.xts <- load.eod.prices(ccy.pair,path.eod)
toUSD.xts <- load.USD.conv(ccy.pair,path.eod)
print(paste("loaded eod reval file",paste(path.eod,ccy.pair,sep=""),sep=":"))
?paste0
require(quantmod)
require(PerformanceAnalytics)
require(xtable)
Sys.setenv(TZ = "Europe/London")
setwd("~/Backtest_Source/R")
load("temp_pnl.RData")
Sys.setenv(TZ = "Europe/London")
setwd("~/Backtest_Source/R")
load("temp_pnl.RData")
enforce.daily <- function(ref,pnl) {
idx1 <- index(first(pnl))
idx2 <- index(last(pnl))
idx <- paste(idx1,idx2,sep="/")
pnl2 <- merge(ref,pnl,fill=0)[idx]
return(pnl2[,2])
}
pnl.daily2 <- enforce.daily(eod.xts,pnl.daily)
charts.PerformanceSummary(pnl.daily2,geometric=T,wealth.index=F,colorset=rich6equal,main=NULL,gap=0,xlab=NULL)
pnl.monthly <- period.apply(pnl.daily2,INDEX=endpoints(pnl.daily2,'months'),FUN=sum)
barplot(pnl.monthly*100,main="Monthly Returns (% AUM)")
DRAWDNS <- table.Drawdowns(pnl.daily2)
plot(pnl.daily2)
table.Drawdowns(pnl.daily2)
table.Drawdowns(pnl.daily)
?table.Drawdowns
table.Drawdowns
DRAWDNS
cn <- colnames(DRAWDNS)
cn[1] <- "Start"
cn[2] <- "Trough"
cn[3] <- "Recovery"
cn[4] <- "Max Drawdn (%)"
cn[5] <- "Duration"
cn[6] <- "Days to Trough"
cn[7] <- "Days to Recovery"
colnames(DRAWDNS) <- cn
row.names(DRAWDNS) <- NULL
DRAWDNS[,4] <- DRAWDNS[,4]*100
dts <- apply(DRAWDNS[,1:3],2,format,format="%d-%m-%Y")
print(xtable(cbind(dts[,c(1:3)],DRAWDNS[,c(4,5)]),digits=c(0,0,0,0,2,0)),floating=FALSE, scalebox=0.7)
dts
dim(dts)
is.data.frame(DRAWDNS)
is.data.frame(dts)
dts <- as.data.frame(apply(DRAWDNS[,1:3],2,format,format="%d-%m-%Y"))
print(xtable(cbind(dts[,c(1:3)],DRAWDNS[,c(4,5)]),digits=c(0,0,0,0,2,0)),floating=FALSE, scalebox=0.7)
dts
dts <- apply(DRAWDNS[,1:3],2,format,format="%d-%m-%Y")
dts.frame <- data.frame(dts)
dts.frame
dts.frame <- data.frame(t(dts))
dts.frame
print(xtable(cbind(dts[,c(1:3)],DRAWDNS[,c(4,5)]),digits=c(0,0,0,0,2,0)),floating=FALSE, scalebox=0.7)
dim(dts.frame)
?write.zoo
require(quantmod)
require(PerformanceAnalytics)
require(xtable)
Sys.setenv(TZ = "Europe/London")
## DEGUB ##
setwd("~/Backtest_Source/R")
## DEGUB ##
load("temp_pnl.RData")
pnl.daily2 <- enforce.daily(eod.xts,pnl.daily)
charts.PerformanceSummary(pnl.daily2,geometric=T,wealth.index=F,colorset=rich6equal,main=NULL,gap=0,xlab=NULL)
DRAWDNS <- table.Drawdowns(pnl.daily2)
DRAWDNS
plot.zoo(cumsum(pnl.daily2))
plot.zoo(cumsum(pnl.daily2),lwd=2)
